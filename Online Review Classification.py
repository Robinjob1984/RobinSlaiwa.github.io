# -*- coding: utf-8 -*-
"""Untitled39.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1MZkMv9R0a7tTMlKfiJ13mjljQP6yUGD7
"""

import json, requests, sklearn.neighbors, sklearn.neural_network, sklearn.metrics, sklearn.model_selection, sklearn.tree, textblob, google.colab.files, joblib

response = requests.get("https://dgoldberg.sdsu.edu/515/appliance_reviews.json")

if response:
    data = json.loads(response.text)

    x = []
    y = []

    for line in data:
        review = line["Review"]
        review1 = (len(review))
        blob = textblob.TextBlob(review)
        polarity1 = blob.polarity
        subjectivity1 = blob.subjectivity
        stars = line["Stars"]
        safetyhazard = line["Safety hazard"]


        inner_list = [review1, polarity1, subjectivity1, stars]
        x.append(inner_list)

        y.append(safetyhazard)

    # print(x)
    # print(y)

    # Split training versus test data
    x_train, x_test, y_train, y_test = sklearn.model_selection.train_test_split(x, y)

    # Build decision tree
    dt_clf = sklearn.tree.DecisionTreeClassifier()
    dt_clf = dt_clf.fit(x_train, y_train)
    dt_predictions = dt_clf.predict(x_test)
    dt_accuracy = sklearn.metrics.accuracy_score(y_test, dt_predictions)
    print("Decision tree accuracy:", round(dt_accuracy,2))

    # Build k-nearest neighbors
    knn_clf = sklearn.neighbors.KNeighborsClassifier()
    knn_clf = knn_clf.fit(x_train, y_train)
    knn_predictions = knn_clf.predict(x_test)
    knn_accuracy = sklearn.metrics.accuracy_score(y_test, knn_predictions)
    print("K-nearest neighbors accuracy:", round(knn_accuracy,2))

    # Build neural network
    nn_clf = sklearn.neural_network.MLPClassifier()
    nn_clf = nn_clf.fit(x_train, y_train)
    nn_predictions = nn_clf.predict(x_test)
    nn_accuracy = sklearn.metrics.accuracy_score(y_test, nn_predictions)
    print("Neural network accuracy:", round(nn_accuracy,2))
    if dt_accuracy > knn_accuracy and dt_accuracy > nn_accuracy:
        joblib.dump(dt_clf, "model.joblib")
        google.colab.files.download("model.joblib")
        print("Decision tree model performed best; saved to model.joblib.")
    elif knn_accuracy > dt_accuracy and knn_accuracy > nn_accuracy:
        joblib.dump(knn_clf, "model.joblib")
        google.colab.files.download("model.joblib")
        print("K-nearest neighbors model performed best; saved to model.joblib")
    else:
        joblib.dump(nn_clf, "model.joblib")
        google.colab.files.download("model.joblib")
        print("Neural network model performed best; saved to model.joblib.")
else:
    print("Sorry, connection error.")